{"ast":null,"code":"var _jsxFileName = \"/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AudioRecorder.jsx\",\n  _s = $RefreshSig$();\n// AudioRecorder.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioRecorder({\n  onTranscriptReady,\n  autoStart\n}) {\n  _s();\n  const [countdown, setCountdown] = useState(20);\n  const [error, setError] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const countdownTimerRef = useRef(null);\n\n  // 开始录音\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      const audioChunks = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        clearInterval(countdownTimerRef.current);\n        if (!audioChunks.length) {\n          setError('No audio data available.');\n          return;\n        }\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/mpeg'\n        });\n        uploadAudio(audioBlob);\n      };\n      mediaRecorderRef.current.start();\n      countdownTimerRef.current = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown > 0 ? prevCountdown - 1 : 0);\n      }, 1000);\n    } catch (error) {\n      setError('Error accessing media devices');\n    }\n  };\n\n  // 停止录音\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      mediaRecorderRef.current.stop();\n    }\n  };\n\n  // 上传音频并获取转录文本\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n    try {\n      const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      onTranscriptReady(response.data.transcript, URL.createObjectURL(audioBlob));\n    } catch (error) {\n      console.error('Error uploading audio:', error);\n    }\n  };\n\n  // 自动开始和停止录音\n  useEffect(() => {\n    if (autoStart) {\n      startRecording();\n    }\n    return () => {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n        mediaRecorderRef.current.stop();\n      }\n      clearInterval(countdownTimerRef.current);\n    };\n  }, [autoStart]);\n\n  // 倒计时结束自动停止录音\n  useEffect(() => {\n    if (countdown === 0) {\n      stopRecording();\n    }\n  }, [countdown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [autoStart && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u5269\\u4F59\\u65F6\\u95F4: \", countdown, \" \\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioRecorder, \"ynCGyOfYl14JNt32KIKhr0g0OFU=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","AudioRecorder","onTranscriptReady","autoStart","_s","countdown","setCountdown","error","setError","mediaRecorderRef","countdownTimerRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","audioChunks","ondataavailable","event","push","data","onstop","clearInterval","length","audioBlob","Blob","type","uploadAudio","start","setInterval","prevCountdown","stopRecording","state","stop","formData","FormData","append","response","post","headers","transcript","URL","createObjectURL","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AudioRecorder.jsx"],"sourcesContent":["// AudioRecorder.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction AudioRecorder({ onTranscriptReady, autoStart }) {\n    const [countdown, setCountdown] = useState(20);\n    const [error, setError] = useState(null);\n    const mediaRecorderRef = useRef(null);\n    const countdownTimerRef = useRef(null);\n\n    // 开始录音\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            const audioChunks = [];\n\n            mediaRecorderRef.current.ondataavailable = event => {\n                audioChunks.push(event.data);\n            };\n\n            mediaRecorderRef.current.onstop = async () => {\n                clearInterval(countdownTimerRef.current);\n                if (!audioChunks.length) {\n                    setError('No audio data available.');\n                    return;\n                }\n                const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n                uploadAudio(audioBlob);\n            };\n\n            mediaRecorderRef.current.start();\n            countdownTimerRef.current = setInterval(() => {\n                setCountdown(prevCountdown => prevCountdown > 0 ? prevCountdown - 1 : 0);\n            }, 1000);\n        } catch (error) {\n            setError('Error accessing media devices');\n        }\n    };\n\n    // 停止录音\n    const stopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n            mediaRecorderRef.current.stop();\n        }\n    };\n\n    // 上传音频并获取转录文本\n    const uploadAudio = async (audioBlob) => {\n        const formData = new FormData();\n        formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n\n        try {\n            const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            onTranscriptReady(response.data.transcript, URL.createObjectURL(audioBlob));\n        } catch (error) {\n            console.error('Error uploading audio:', error);\n        }\n    };\n\n    // 自动开始和停止录音\n    useEffect(() => {\n        if (autoStart) {\n            startRecording();\n        }\n        return () => {\n            if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n                mediaRecorderRef.current.stop();\n            }\n            clearInterval(countdownTimerRef.current);\n        };\n    }, [autoStart]);\n\n    // 倒计时结束自动停止录音\n    useEffect(() => {\n        if (countdown === 0) {\n            stopRecording();\n        }\n    }, [countdown]);\n\n    return (\n        <div>\n            {autoStart && <p>剩余时间: {countdown} 秒</p>}\n            {error && <p>Error: {error}</p>}\n        </div>\n    );\n}\n\nexport default AudioRecorder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}