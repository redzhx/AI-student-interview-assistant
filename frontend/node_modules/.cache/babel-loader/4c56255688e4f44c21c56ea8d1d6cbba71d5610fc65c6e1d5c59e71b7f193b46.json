{"ast":null,"code":"var _jsxFileName = \"/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AnswerSection-0.jsx\",\n  _s = $RefreshSig$();\n// AnswerSection-old.jsx\nimport React, { useState } from 'react';\nimport AudioRecorder from './AudioRecorder';\nimport TextInput from './TextInput';\nimport { Button, Spinner } from 'react-bootstrap';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AnswerSection({\n  onAnswerSubmit,\n  disabled\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(20);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [transcript, setTranscript] = useState(''); // 定义 transcript 状态\n  const [audioUrl, setAudioUrl] = useState(''); // 定义 audioUrl 状态\n  const countdownTimerRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const [showTextInput, setShowTextInput] = useState(false);\n  // const [answer, setAnswer] = useState(''); // 正确声明 answer 状态和 setAnswer 函数\n\n  const handleAudioTranscriptReady = (transcript, audioUrl) => {\n    //   setIsRecording(false); // 停止录音\n    setTranscript(transcript); // 设置转写文本\n    setAudioUrl(audioUrl); // 设置录音文件的 URL\n    onAnswerSubmit(transcript); // 提交答案进行评价\n  };\n  const toggleAnswerMode = () => {\n    setIsRecording(!isRecording);\n  };\n  useEffect(() => {\n    if (countdown === 0 && isRecording) {\n      stopRecording();\n    }\n  }, [countdown, isRecording]);\n  useEffect(() => {\n    return () => {\n      clearInterval(countdownTimerRef.current);\n    };\n  }, []);\n  const startRecording = async () => {\n    // 清除旧的录音文件和转写文本\n    setAudioUrl(null);\n    setTranscript('');\n    setError(null);\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      const audioChunks = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        if (!audioChunks.length) {\n          setError('No audio data available.');\n          return;\n        }\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/mpeg'\n        });\n        setAudioUrl(URL.createObjectURL(audioBlob));\n        uploadAudio(audioBlob);\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      setCountdown(20); // 重置倒计时\n      countdownTimerRef.current = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n    } catch (error) {\n      setError('Error accessing media devices');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      clearInterval(countdownTimerRef.current);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    setLoading(true); // 开始上传时显示 Spinner\n    const formData = new FormData();\n    formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n    try {\n      const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setTranscript(response.data.transcript);\n      onTranscriptReady(response.data.transcript);\n    } catch (error) {\n      console.error('Error uploading audio:', error);\n    }\n    setLoading(false); // 上传结束或发生错误时隐藏 Spinner\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"answerarea\",\n    className: \"container  mt-4\",\n    children: [transcript && !isRecording && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audioUrl,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true), isRecording ? /*#__PURE__*/_jsxDEV(AudioRecorder, {\n      onTranscriptReady: handleAudioTranscriptReady,\n      autoStart: isRecording\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(TextInput, {\n      onTextSubmit: onAnswerSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: toggleAnswerMode,\n      disabled: disabled,\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n        className: isRecording ? \"fa-solid fa-keyboard\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this), isRecording ? '' : '取消']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(AnswerSection, \"rjy8LnvXEod12L72IJ/sPaylF9k=\");\n_c = AnswerSection;\nexport default AnswerSection;\nvar _c;\n$RefreshReg$(_c, \"AnswerSection\");","map":{"version":3,"names":["React","useState","AudioRecorder","TextInput","Button","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","AnswerSection","onAnswerSubmit","disabled","_s","isRecording","setIsRecording","countdown","setCountdown","error","setError","loading","setLoading","transcript","setTranscript","audioUrl","setAudioUrl","countdownTimerRef","useRef","mediaRecorderRef","showTextInput","setShowTextInput","handleAudioTranscriptReady","toggleAnswerMode","useEffect","stopRecording","clearInterval","current","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","audioChunks","ondataavailable","event","push","data","onstop","length","audioBlob","Blob","type","URL","createObjectURL","uploadAudio","start","setInterval","prevCountdown","stop","formData","FormData","append","response","axios","post","headers","onTranscriptReady","console","id","className","children","src","controls","fileName","_jsxFileName","lineNumber","columnNumber","autoStart","onTextSubmit","variant","onClick","_c","$RefreshReg$"],"sources":["/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AnswerSection-0.jsx"],"sourcesContent":["// AnswerSection-old.jsx\nimport React, {  useState } from 'react';\nimport AudioRecorder from './AudioRecorder';\nimport TextInput from './TextInput';\nimport { Button, Spinner } from 'react-bootstrap';\nimport '../App.css';\n\nfunction AnswerSection({ onAnswerSubmit,disabled, }) {\n\n  const [isRecording, setIsRecording] = useState(false);\n  const [countdown, setCountdown] = useState(20);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [transcript, setTranscript] = useState(''); // 定义 transcript 状态\n  const [audioUrl, setAudioUrl] = useState(''); // 定义 audioUrl 状态\n  const countdownTimerRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n\n  const [showTextInput, setShowTextInput] = useState(false);\n  // const [answer, setAnswer] = useState(''); // 正确声明 answer 状态和 setAnswer 函数\n\n    const handleAudioTranscriptReady = (transcript, audioUrl) => {\n    //   setIsRecording(false); // 停止录音\n      setTranscript(transcript); // 设置转写文本\n      setAudioUrl(audioUrl); // 设置录音文件的 URL\n      onAnswerSubmit(transcript); // 提交答案进行评价\n  };\n\n    const toggleAnswerMode = () => {\n        setIsRecording(!isRecording);\n    };\n    useEffect(() => {\n      if (countdown === 0 && isRecording) {\n          stopRecording();\n      }\n  }, [countdown, isRecording]);\n\n  useEffect(() => {\n      return () => {\n          clearInterval(countdownTimerRef.current);\n      };\n  }, []);\n\n  const startRecording = async () => {\n      // 清除旧的录音文件和转写文本\n      setAudioUrl(null);\n      setTranscript('');\n      setError(null);\n\n      try {\n      \n          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n          mediaRecorderRef.current = new MediaRecorder(stream);\n          const audioChunks = [];\n\n          mediaRecorderRef.current.ondataavailable = event => {\n              audioChunks.push(event.data);\n          };\n\n          mediaRecorderRef.current.onstop = async () => {\n              if (!audioChunks.length) {\n                  setError('No audio data available.');\n                  return;\n              }\n              const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n              setAudioUrl(URL.createObjectURL(audioBlob));\n              uploadAudio(audioBlob);\n          };\n\n          mediaRecorderRef.current.start();\n          setIsRecording(true);\n          setCountdown(20); // 重置倒计时\n          countdownTimerRef.current = setInterval(() => {\n              setCountdown(prevCountdown => prevCountdown - 1);\n          }, 1000);\n      } catch (error) {\n          setError('Error accessing media devices');\n      }\n  };\n\n  const stopRecording = () => {\n      if (mediaRecorderRef.current && isRecording) {\n          mediaRecorderRef.current.stop();\n          setIsRecording(false);\n          clearInterval(countdownTimerRef.current);\n      }\n  };\n\n  const uploadAudio = async (audioBlob) => {\n      setLoading(true); // 开始上传时显示 Spinner\n      const formData = new FormData();\n      formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n\n      try {\n          const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n              headers: {\n                  'Content-Type': 'multipart/form-data',\n              },\n          });\n          setTranscript(response.data.transcript);\n          onTranscriptReady(response.data.transcript);\n      } catch (error) {\n          console.error('Error uploading audio:', error);\n      }\n      setLoading(false); // 上传结束或发生错误时隐藏 Spinner\n\n  };\n\n\n    return (\n        <div id=\"answerarea\" className=\"container  mt-4\">\n            {transcript && !isRecording && (\n            <>\n              <audio src={audioUrl} controls />\n              <p>{transcript}</p>\n            </>\n          )}\n          {isRecording ? (\n            <AudioRecorder onTranscriptReady={handleAudioTranscriptReady} autoStart={isRecording} />\n          ) : (\n            <TextInput onTextSubmit={onAnswerSubmit} />\n            )}\n          \n          <Button variant=\"primary\" onClick={toggleAnswerMode}  disabled={disabled}> {/* 使用 disabled 属性 */}\n            <i className={isRecording ? \"fa-solid fa-keyboard\" : \"\"}></i>\n            {isRecording ? '' : '取消'}\n          </Button>\n        </div>\n    );\n}\nexport default AnswerSection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}