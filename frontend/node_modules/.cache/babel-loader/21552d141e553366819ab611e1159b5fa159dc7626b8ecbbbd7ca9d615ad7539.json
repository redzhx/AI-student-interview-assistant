{"ast":null,"code":"var _jsxFileName = \"/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AudioRecorder.jsx\",\n  _s = $RefreshSig$();\n// AudioRecorder.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioRecorder({\n  onTranscriptReady,\n  autoStart\n}) {\n  _s();\n  // const [transcript, setTranscript] = useState('');\n\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [countdown, setCountdown] = useState(20);\n  const [error, setError] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const countdownTimerRef = useRef(null);\n  useEffect(() => {\n    if (autoStart) {\n      startRecording();\n    } else if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      stopRecording();\n    }\n  }, [autoStart]);\n  useEffect(() => {\n    if (countdown === 0 && autoStart) {\n      stopRecording();\n    }\n  }, [countdown, autoStart]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      const audioChunks = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        if (!audioChunks.length) {\n          setError('No audio data available.');\n          return;\n        }\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/mpeg'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        setAudioUrl(audioUrl);\n\n        // setAudioUrl(URL.createObjectURL(audioBlob));\n        uploadAudio(audioBlob);\n      };\n      mediaRecorderRef.current.start();\n      setCountdown(20); // 重置倒计时\n      countdownTimerRef.current = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n    } catch (error) {\n      setError('Error accessing media devices');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      mediaRecorderRef.current.stop();\n      clearInterval(countdownTimerRef.current);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n    try {\n      const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      onTranscriptReady(response.data.transcript, URL.createObjectURL(audioBlob));\n    } catch (error) {\n      console.error('Error uploading audio:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: autoStart && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u5269\\u4F59\\u65F6\\u95F4: \", countdown, \" \\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioRecorder, \"e68rEeBXm6QS+IZEgTjL0EKs+/E=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","AudioRecorder","onTranscriptReady","autoStart","_s","audioUrl","setAudioUrl","countdown","setCountdown","error","setError","mediaRecorderRef","countdownTimerRef","startRecording","current","state","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","audioChunks","ondataavailable","event","push","data","onstop","length","audioBlob","Blob","type","URL","createObjectURL","uploadAudio","start","setInterval","prevCountdown","stop","clearInterval","formData","FormData","append","response","post","headers","transcript","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AudioRecorder.jsx"],"sourcesContent":["// AudioRecorder.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction AudioRecorder({ onTranscriptReady, autoStart }) {\n    // const [transcript, setTranscript] = useState('');\n\n    const [audioUrl, setAudioUrl] = useState(null);\n    const [countdown, setCountdown] = useState(20);\n    const [error, setError] = useState(null);\n\n    const mediaRecorderRef = useRef(null);\n    const countdownTimerRef = useRef(null);\n\n    useEffect(() => {\n        if (autoStart) {\n            startRecording();\n        } else if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n            stopRecording();\n        }\n    }, [autoStart]);\n\n    useEffect(() => {\n        if (countdown === 0 && autoStart) {\n            stopRecording();\n        }\n    }, [countdown, autoStart]);\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            const audioChunks = [];\n\n            mediaRecorderRef.current.ondataavailable = event => {\n                audioChunks.push(event.data);\n            };\n\n            mediaRecorderRef.current.onstop = async () => {\n                if (!audioChunks.length) {\n                    setError('No audio data available.');\n                    return;\n                }\n                const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n                const audioUrl = URL.createObjectURL(audioBlob);\n                setAudioUrl(audioUrl);\n\n                // setAudioUrl(URL.createObjectURL(audioBlob));\n                uploadAudio(audioBlob);\n            };\n\n            mediaRecorderRef.current.start();\n            setCountdown(20); // 重置倒计时\n            countdownTimerRef.current = setInterval(() => {\n                setCountdown(prevCountdown => prevCountdown - 1);\n            }, 1000);\n        } catch (error) {\n            setError('Error accessing media devices');\n        }\n    };\n\n\n    const stopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n            mediaRecorderRef.current.stop();\n            clearInterval(countdownTimerRef.current);\n        }\n    };\n\n\n    const uploadAudio = async (audioBlob) => {\n        const formData = new FormData();\n        formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n\n        try {\n            const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            onTranscriptReady(response.data.transcript, URL.createObjectURL(audioBlob));\n\n        } catch (error) {\n            console.error('Error uploading audio:', error);\n        }\n    };\n\n    return (\n\n        <div>\n        {autoStart && <p>剩余时间: {countdown} 秒</p>}\n    </div>\n    );\n}\n\nexport default AudioRecorder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}