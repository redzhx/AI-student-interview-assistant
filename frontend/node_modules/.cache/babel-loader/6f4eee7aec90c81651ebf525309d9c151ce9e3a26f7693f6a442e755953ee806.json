{"ast":null,"code":"var _jsxFileName = \"/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AudioRecorder.jsx\",\n  _s = $RefreshSig$();\n// AudioRecorder.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\n// import 'bootstrap/dist/css/bootstrap.min.css'; // 导入 Bootstrap 样式\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioRecorder({\n  onTranscriptReady,\n  autoStart\n}) {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [countdown, setCountdown] = useState(20);\n  const [error, setError] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const countdownTimerRef = useRef(null);\n  useEffect(() => {\n    // 处理录音的自动开始和停止\n    if (autoStart) {\n      startRecording();\n    } else if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      stopRecording();\n    }\n  }, [autoStart]);\n\n  // useEffect(() => {\n  //     if (countdown === 0 && isRecording) {\n  //         stopRecording();\n  //     }\n  // }, [countdown, isRecording]);\n\n  // useEffect(() => {\n  //     return () => {\n  //         clearInterval(countdownTimerRef.current);\n  //     };\n  // }, []);\n  // const toggleRecording = async () => {\n  //     if (isRecording) {\n  //         stopRecording();\n  //     } else {\n  //         await startRecording();\n  //     }\n  // };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      const audioChunks = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunks.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        if (!audioChunks.length) {\n          setError('No audio data available.');\n          return;\n        }\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/mpeg'\n        });\n        setAudioUrl(URL.createObjectURL(audioBlob));\n        uploadAudio(audioBlob);\n      };\n      mediaRecorderRef.current.start();\n      setCountdown(20); // 重置倒计时\n      countdownTimerRef.current = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n    } catch (error) {\n      setError('Error accessing media devices');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      mediaRecorderRef.current.stop();\n      // setIsRecording(false);\n      clearInterval(countdownTimerRef.current);\n    }\n  };\n  const uploadAudio = async audioBlob => {\n    const formData = new FormData();\n    formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n    try {\n      const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      // setTranscript(response.data.transcript);\n      // onTranscriptReady(response.data.transcript);\n      onTranscriptReady(response.data.transcript, URL.createObjectURL(audioBlob));\n    } catch (error) {\n      console.error('Error uploading audio:', error);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <div>\n    //     {autoStart && <p>剩余时间: {countdown} 秒</p>}\n    //     {audioUrl && <audio src={audioUrl} controls />}\n    //     {error && <p>Error: {error}</p>}\n    // </div>\n    _jsxDEV(\"div\", {\n      children: autoStart && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u5269\\u4F59\\u65F6\\u95F4: \", countdown, \" \\u79D2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(AudioRecorder, \"GyyEh/fri/iRMmXiSNww3BrT1WI=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","AudioRecorder","onTranscriptReady","autoStart","_s","transcript","setTranscript","audioUrl","setAudioUrl","countdown","setCountdown","error","setError","mediaRecorderRef","countdownTimerRef","startRecording","current","state","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","audioChunks","ondataavailable","event","push","data","onstop","length","audioBlob","Blob","type","URL","createObjectURL","uploadAudio","start","setInterval","prevCountdown","stop","clearInterval","formData","FormData","append","response","post","headers","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zxh/0.Me/Mylearn/AIcoding/mywork/interview-assistant-react_stroop/frontend/src/components/AudioRecorder.jsx"],"sourcesContent":["// AudioRecorder.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\n// import 'bootstrap/dist/css/bootstrap.min.css'; // 导入 Bootstrap 样式\n\n\nfunction AudioRecorder({ onTranscriptReady, autoStart }) {\n    const [transcript, setTranscript] = useState('');\n\n    const [audioUrl, setAudioUrl] = useState(null);\n    const [countdown, setCountdown] = useState(20);\n    const [error, setError] = useState(null);\n\n    const mediaRecorderRef = useRef(null);\n    const countdownTimerRef = useRef(null);\n\n\n    useEffect(() => {\n        // 处理录音的自动开始和停止\n        if (autoStart) {\n            startRecording();\n        } else if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n            stopRecording();\n        }\n    }, [autoStart]);\n    \n\n    // useEffect(() => {\n    //     if (countdown === 0 && isRecording) {\n    //         stopRecording();\n    //     }\n    // }, [countdown, isRecording]);\n\n    // useEffect(() => {\n    //     return () => {\n    //         clearInterval(countdownTimerRef.current);\n    //     };\n    // }, []);\n    // const toggleRecording = async () => {\n    //     if (isRecording) {\n    //         stopRecording();\n    //     } else {\n    //         await startRecording();\n    //     }\n    // };\n\n    \n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            const audioChunks = [];\n\n            mediaRecorderRef.current.ondataavailable = event => {\n                audioChunks.push(event.data);\n            };\n\n            mediaRecorderRef.current.onstop = async () => {\n                if (!audioChunks.length) {\n                    setError('No audio data available.');\n                    return;\n                }\n                const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\n                setAudioUrl(URL.createObjectURL(audioBlob));\n                uploadAudio(audioBlob);\n            };\n\n            mediaRecorderRef.current.start();\n            setCountdown(20); // 重置倒计时\n            countdownTimerRef.current = setInterval(() => {\n                setCountdown(prevCountdown => prevCountdown - 1);\n            }, 1000);\n        } catch (error) {\n            setError('Error accessing media devices');\n        }\n    };\n\n\n    const stopRecording = () => {\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n            mediaRecorderRef.current.stop();\n            // setIsRecording(false);\n            clearInterval(countdownTimerRef.current);\n        }\n    };\n\n    const uploadAudio = async (audioBlob) => {\n        const formData = new FormData();\n        formData.append(\"audioFile\", audioBlob, \"audio.mp3\");\n\n        try {\n            const response = await axios.post('http://localhost:8000/api/upload-audio', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n            // setTranscript(response.data.transcript);\n            // onTranscriptReady(response.data.transcript);\n            onTranscriptReady(response.data.transcript, URL.createObjectURL(audioBlob));\n\n        } catch (error) {\n            console.error('Error uploading audio:', error);\n        }\n    };\n\n\n\n    return (\n        // <div>\n        //     {autoStart && <p>剩余时间: {countdown} 秒</p>}\n        //     {audioUrl && <audio src={audioUrl} controls />}\n        //     {error && <p>Error: {error}</p>}\n        // </div>\n        <div>\n        {autoStart && <p>剩余时间: {countdown} 秒</p>}\n        {/* 移除 audio 控件和错误信息显示 */}\n    </div>\n    );\n}\n\nexport default AudioRecorder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}